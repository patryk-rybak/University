

zad 3																								

potok (pipeline) - sa to procesy polaczone w taki sposob, zeby wyjscie pierwszego bylo wejsciem durgiego, wejscie drugiego wyjsciem trzeciego itd.

rura (pipe) - bufor pamieci zarzadzany przez jadro systemowe, przez kotry za pomoca file descriptorow komunikuja sie procesy (jednokierunkowo)

standardowe wyjście - strumien danych przkazywany za posrednictwem file descriptora 1 do bufora, z ktorego trafiaja do przeznaczenia


strace -e trace=openat,dup2,pipe2,close,clone,execve -o pipeline.log -f dash
$ ps -ef | grep sh | wc -l > cnt
$ exit











zad 5

rekord katalogu - linux_dirent below 
rekord katalogu jest to krotka w postaci (nazwa_pliku, inode), która mapuje plik po nazwie do miejsca na dysku. Katalog składa się z wielu takich krotek.

metadane - wyjasnione below albo dane o danych

dowiazania (hard links) - The link() system call takes two arguments, an old pathname and a new one; when you “link” a new file name to an old one, you essentially create another way to refer to the same file. The command-line program ln is used to do this. The link() system call takes two arguments, an old pathname and a new one; when you “link” a new file name to an old one, you essentially create another way to refer to the same file. The command-line program ln is used to do this. example:
prompt> echo hello > file
prompt> cat file
hello
prompt> ln file file2
prompt> cat file2
hello
prompt> ls -i file file2
67158084 file
67158084 file2
prompt>

Note you can never write to a directory di-
rectly; because the format of the directory is considered file system meta-
data, you can only update a directory indirectly by, for example, creating
files, directories, or other object types within it. In this way, the file system
makes sure that the contents of the directory always are as expected.

to jest jedyny plik z punktu widzenia unixa, ktory zorganizowany jest jak lista rekordow. W zwiazku z tym read i write jest nie odstosowany poniewaz read i write dzialaja na poziomie bajtow a nie rekordow - zapisuja odczytuja bajty a my chcielibysmy zapisywac odczytywac rekordy. Stosujac write moglibysmy niezle namieszac zapisujac nowe rzeczy nie zwarzajac na granice miedzy rekordami, analogiczeniz read


strace ls

openat(AT_FDCWD, ".", O_RDONLY|O_NONBLOCK|O_CLOEXEC|O_DIRECTORY) = 3
newfstatat(3, "", {st_mode=S_IFDIR|0750, st_size=4096, ...}, AT_EMPTY_PATH) = 0
getdents64(3, 0x55fcee689ab0 /* 51 entries */, 32768) = 1664
getdents64(3, 0x55fcee689ab0 /* 0 entries */, 32768) = 0
close(3)                                = 0


DESCRIPTION
       These are not the interfaces you are interested in.  Look at readdir(3) for the POSIX-conforming C library interface.  This page documents the bare kernel system call interfaces.

   getdents()
       The system call getdents() reads several linux_dirent structures from the directory referred to by the open file descriptor fd into the buffer pointed to by dirp.  The argument count specifies the size
       of that buffer.

       The linux_dirent structure is declared as follows:

           struct linux_dirent {
               unsigned long  d_ino;     /* Inode number */
               unsigned long  d_off;     /* Offset to next linux_dirent */
               unsigned short d_reclen;  /* Length of this linux_dirent */
               char           d_name[];  /* Filename (null-terminated) */
                                 /* length is actually (d_reclen - 2 -
                                    offsetof(struct linux_dirent, d_name)) */
               /*
               char           pad;       // Zero padding byte
               char           d_type;    // File type (only since Linux
                                         // 2.6.4); offset is (d_reclen - 1)
               */
           }


Zawartosc katalogu nie jest posortowana. Jest to oczekiwane pod względem wydajności, bo gdyby system utrzymywał np. kolejność leksykalną to dodanie jednego pliku mogłoby wywołać przeniesienie dużej ilości danych.

stat /

  File: /
  Size: 4096      	Blocks: 8          IO Block: 4096   directory
Device: 10304h/66308d	Inode: 2           Links: 19
Access: (0755/drwxr-xr-x)  Uid: (    0/    root)   Gid: (    0/    root)
Access: 2023-10-31 23:23:07.998513745 +0100
Modify: 2023-05-14 19:52:33.240222804 +0200
Change: 2023-05-14 19:52:33.240222804 +0200
 Birth: 2023-05-14 19:50:29.000000000 +0200


    File: The name of the provided file. If the provided file is a symlink, then the name will be different.
    Size: The size of a given file in Bytes.
    Blocks: Total number of allocated blocks to the file to store on the hard disk.
    IO Block: The size of every allocated block in bytes.
    File type: The file may be of the following types: Regular files, special files, directories, or symbolic links.
    Device: Device number in hexadecimal format.
    Inode: Inode number of the file.
    Links: Number of hard links of the file.
    Access: Access permissions in the numeric and symbolic methods.
    Context: The field stores SELinux security context.
    Access: The last time at which the file was accessed.
    Modify: The last time at which file was modified.
    Change: The last time the at which file’s attribute or content was changed.
    Birth: The time at which the file was created.

liczba hard linkow wynika z tego

ls -al | grep "^d"

.    boot   etc   lib32   lost+found  opt   run   swapfile  usr
..   cdrom  home  lib64   media       proc  sbin  sys       var
bin  dev    lib   libx32  mnt         root  srv   tmp





zad 6

TOCTTOU (Time Of Check To Time Of Use) is a well
known security problem [1] in file systems with weak
synchronization semantics (e.g., Unix file system). A
TOCTTOU vulnerability requires two steps [2]. First, a
vulnerable program checks for a file status. Second, the
program operates on the file assuming the original file
status remained invariant during execution. For exam-
ple, sendmail may check for a specific attribute of a
mailbox (e.g., it is not a symbolic link) in step one and
then append new messages (as root) in step two. Be-
cause the two steps are not executed atomically, a local
attacker (mailbox owner) can exploit the window of
vulnerability between the two steps by deleting his/her
mailbox and replacing it with a symbolic link to
/etc/passwd. If the replacement is completed within the
window and the new messages happen to be syntacti-
cally correct /etc/passwd entries with root access, then
sendmail may unintentionally give unauthorized root
access to a normal user (the attacker).

The basic idea behind TOCTTOU errors is that a program is vulnerable if it makes
two file-based function calls where the second call depends on the results of the first
call. Because the two calls are not atomic, the file can change between the two calls,
thereby invalidating the results of the first call, leading to a program error.



#include "csapp.h"

bool f_lock(const char *path) 
{
    int status = Open(path, O_CREAT|O_WRONLY|O_EXCL, 0700);
    
    return status == 0;
}

void f_unlock(const char *path) 
{
    Unlink(path);
}

O_EXCL Ensure that this call creates the file: if this flag is specified in conjunction with O_CREAT, and pathname already exists, then open() fails with the error EEXIST.




zad 8

stat holes.bin

File: holes.bin
  Size: 33550336  	Blocks: 1112       IO Block: 4096   regular file
Device: 10304h/66308d	Inode: 4094543     Links: 1
Access: (0644/-rw-r--r--)  Uid: ( 1000/  patryk)   Gid: ( 1000/  patryk)
Access: 2023-11-01 20:08:58.391268380 +0100
Modify: 2023-11-01 20:09:06.207486858 +0100
Change: 2023-11-01 20:09:06.207486858 +0100
 Birth: 2023-11-01 20:08:31.110498440 +0100

    File: The name of the provided file. If the provided file is a symlink, then the name will be different.
    Size: The size of a given file in Bytes.
    Blocks: Total number of allocated blocks to the file to store on the hard disk.
    IO Block: The size of every allocated block in bytes.
    File type: The file may be of the following types: Regular files, special files, directories, or symbolic links.
    Device: Device number in hexadecimal format.
    Inode: Inode number of the file.
    Links: Number of hard links of the file.
    Access: Access permissions in the numeric and symbolic methods.
    Context: The field stores SELinux security context.
    Access: The last time at which the file was accessed.
    Modify: The last time at which file was modified.
    Change: The last time the at which file’s attribute or content was changed.
    Birth: The time at which the file was created.


(
Z kody wynikaloby, ez "miejsca dziurawych blokow" sa losowe, ale wcale tak nie jest i caly czas sa takie same ocob?
)


The stat structure
       All  of  these system calls return a stat structure, which contains the
       following fields:

           struct stat {
               dev_t     st_dev;         /* ID of device containing file */
               ino_t     st_ino;         /* Inode number */
               mode_t    st_mode;        /* File type and mode */
               nlink_t   st_nlink;       /* Number of hard links */
               uid_t     st_uid;         /* User ID of owner */
               gid_t     st_gid;         /* Group ID of owner */
               dev_t     st_rdev;        /* Device ID (if special file) */
               off_t     st_size;        /* Total size, in bytes */
               blksize_t st_blksize;     /* Block size for filesystem I/O */
               blkcnt_t  st_blocks;      /* Number of 512B blocks allocated */

               /* Since Linux 2.6, the kernel supports nanosecond
                  precision for the following timestamp fields.
                  For the details before Linux 2.6, see NOTES. */

               struct timespec st_atim;  /* Time of last access */
               struct timespec st_mtim;  /* Time of last modification */
               struct timespec st_ctim;  /* Time of last status change */

           #define st_atime st_atim.tv_sec      /* Backward compatibility */
           #define st_mtime st_mtim.tv_sec
           #define st_ctime st_ctim.tv_sec
           };

azgadza sie z wywolaniem stat -f holes.bin



 st_blocks * st_blksize = 1112 * 4096 = 4554752 bytes = 4.55 mb ======= faktyczna objetosc pliku

 liczba blokow wynikajaca z st_size = st_size / st_blksize = 8191



 dlaczego uzyta liczba blokow jest mniejsza od tej wynikajacej z objetosci? 

 The file’s offset can be greater than the file’s current size, in which case the next
write to the file will extend the file. This is referred to as creating a hole in a file and is
allowed. Any bytes in a file that have not been written are read back as 0.

A hole in a file isn’t required to have storage backing it on disk. Depending on the
file system implementation, when you write after seeking past the end of a file, new
disk blocks might be allocated to store the data, but there is no need to allocate disk
blocks for the data between the old end of file and the location where you start writing.

czemu jest wieksza od tych zglaszanych przez mkholec?

Non-zero blocks: 138

uzupełnić
