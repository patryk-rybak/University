/*
1. If the real user ID of the process is 0 (the superuser), access is allowed. This
gives the superuser free rein throughout the entire file system.

2. If the real user ID of the process equals the owner ID of the file (i.e., the
process owns the file), access is allowed if the appropriate user access
permission bit is set. Otherwise, permission is denied. By appropriate access
permission bit, we mean that if the process is opening the file for reading, the
user-read bit must be on. If the process is opening the file for writing, the
user-write bit must be on. If the process is executing the file, the user-execute bit
must be on.

3. If the real group ID of the process or one of the supplementary group IDs of
the process equals the group ID of the file, access is allowed if the appropriate
group access permission bit is set. Otherwise, permission is denied.

4. If the appropriate other access permission bit is set, access is allowed.
Otherwise, permission is denied.
*/



bool my_access(struct stat *sb, int mode) {

	uid_t my_uid = getuid();

	if (my_uid == 0) { return true;  }
	if (my_uid == sb->st_uid) {
		mode_t sb_mode = sb->st_mdoe;
		
		uint16_t sb_user_read = sb_mode & S_IRUSR;
		uint16_t sb_user_write = sb_mode & S_IWUSR;
		uint16_t sb_user_execution = sb_mode & S_IXUSR;

		uint16_t read_check = mode & R_OK;
		uint16_t write_check = mode & W_OK;
		uint16_t execution_check = mode & X_OK;

		return (!read_check or sb_user_read) &&
			   (!write_check or sb_user_write) &&
			   (!execution_check && sb_user_execution); 
	}
	
	gid_t my_gid = getgid();

	gid_t res = supplementary_groups[65536]; // getconf NGROUPS_MAX
	int grups = getgroups(65536, res);

	if my_gid in supplementary_groups:
		uint8_t sb_group_read = sb_mode & S_IRGRP;
		uint8_t sb_group_write = sb_mode & S_IWGRP;
		uint8_t sb_group_execution = sb_mode & S_IXGRP;
		
		return (!read_check or sb_group_read) &&
			   (!write_check or sb_group_write) &&
			   (!execution_check && sb_group_execution); 

	uint8_t sb_other_read = sb_mode & S_IROTH;
	uint8_t sb_other_write = sb_mode & S_IWOTH;
	uint8_t sb_other_execution = sb_mode & S_IXOTH;
		
	return (!read_check or sb_group_read) &&
		   (!write_check or sb_group_write) &&
		   (!execution_check && sb_group_execution);	 


}
